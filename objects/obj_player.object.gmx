<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player_idle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100</depth>
  <persistent>0</persistent>
  <parentName>obj_char</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Parent Event

event_inherited();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Variables

active = true;
team = teams.PLAYER;

//Sounds

sound_hit = snd_player_hit;
sound_die = snd_player_die;

//Animation Variables

//create_ani(sprite, frametime, is_loop, is_chain)
//create_ani_atk(sprite, frametime, is_loop, frame_hit_start, frame_hit_end, is_chain)

//Make sure these match the enum index!

//IDLE
anis[0, 0] = create_ani(spr_player_idle, 1, true, false);
//WALK
anis[1, 0] = create_ani(spr_player_walk, 10, true, false);
//JUMP
anis[2, 0] = create_ani(spr_player_jump, 2, false, false);
//FALL
anis[3, 0] = create_ani(spr_player_fall_start, 10, false, true);
anis[3, 1] = create_ani(spr_player_fall, 10, true, false);
//LAND
anis[4, 0] = create_ani(spr_player_land, 2, false, false);
//HIT
anis[5, 0] = create_ani(spr_player_hit, 8, false, false);
//ATTACK0
anis[6, 0] = create_ani_atk(spr_player_attack0, 8, false, 1, 1, false);
//ATTACK1
anis[7, 0] = create_ani_atk(spr_player_attack1, 10, false, 1, 1, false);


//Attack Variables

//create_atk_hbox(sprite, damage, x_knockback, y_knockback, immune_time)
//create_atk_proj(sprite, x_offset, y_offset, x_speed, y_speed, damage, x_knockback, y_knockback, immune_time)

//Make sure these match the index of the animation!
//Every attack animation needs an obj_atk!

//ATTACK0
atks[6, 0] = create_atk_proj(spr_blue_proj, 28, -31, 5, 0, 1, 3, -3, 5, team, snd_player_attack0);
//ATTACK1
atks[7, 0] = create_atk_hbox(spr_attack1_hbox, 2, 5, -5, 20, team, snd_player_attack1);


//Input Variables

input_left  = false;
input_right = false;
input_jump_pressed = false;
jump_buffer = 0;
jump_buffer_max = 10;

//Health

hp = 5;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Input

//Set input variables

if active
{
    input_left = keyboard_check(ord('A'));
    input_right = keyboard_check(ord('D'));
    input_attack0 = keyboard_check(vk_left);
    input_attack1 = keyboard_check(vk_down);
    input_jump_pressed = keyboard_check_pressed(vk_space);
}
else
{
    input_left = false;
    input_right = false;
    input_attack0 = false;
    input_attack1 = false;
    input_jump_pressed = false;
}
    
x_input_dir = -input_left + input_right;

//Jump Input Buffering

if input_jump_pressed
{
    jump_buffer = 1;
}

if jump_buffer &gt; 0
{
    jump_buffer++;
}

if jump_buffer &gt; jump_buffer_max + 1
{
    jump_buffer = 0;
}

input_jump = jump_buffer &gt; 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Parent Event

event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*

draw_set_color(c_black);

draw_text(0, 0, global.counter);
draw_text(0, 20, string(image_index));
draw_text(0, 40, "immune: " + string(immune));
draw_text(0, 60, "immune_time: " + string(immune_time));
draw_text(0, 80, "hp: " + string(hp));

draw_text(x - 100, y - 320, "sprite_index: " + string(sprite_index));
draw_text(x - 100, y - 300, "bbox width: " + string((bbox_right - bbox_left) / 2));
draw_text(x - 100, y - 280, "bbox left: " + string(bbox_left));
draw_text(x - 100, y - 260, "bbox right: " + string(bbox_right));
draw_text(x - 100, y - 240, "x: " + string(x));
draw_text(x - 100, y - 220, "y : " + string(y));
draw_text(x - 100, y - 200, "x speed: " + string(x_speed));
draw_text(x - 100, y - 180, "y speed: " + string(y_speed));
draw_text(x - 100, y - 140, "state: " + string(state));
draw_text(x - 100, y - 120, "on floor: " + string(on_ground));

*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Drawing

draw_self();

draw_sprite(spr_player_hp, floor(hp), view_xview + 8, view_yview + 8);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
