<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Variables

//Enum Index
/*
IDLE = 0,
WALK = 1,
JUMP = 2,
FALL = 3,
LAND = 4,
HIT = 5,
ATTACK0 = 6,
ATTACK1 = 7,
etc...
6-11 is for air attacks
12-16 is for ground attacks
*/

//Sounds

sound_hit = noone;
sound_die = noone;

//State Variables

state = states.IDLE;
state_prev = states.IDLE;

//Animation Variables

//create_ani(sprite, frametime, is_loop, is_chain)
//create_ani_atk(sprite, frametime, is_loop, frame_hit_start, frame_hit_end, is_chain)

//Make sure these match the enum index!

//IDLE
anis[0, 0] = create_ani(spr_default, 1, true, false);

ani_timer = 0;
ani_chain = 0;
ani_attack = false;
ani_end = false;
facing = 1;
image_speed = 0;

//Attack Variables

//create_atk_hbox(sprite, damage, x_knockback, y_knockback, immune_time)
//create_atk_proj(sprite, x_offset, y_offset, x_speed, y_speed, damage, x_knockback, y_knockback, immune_time)

//Make sure these match the index of the animation!
//Every attack animation needs an obj_atk!

//Misc

float_height = 0;

//Input Variables

input_jump = false;
input_attack0 = false;
input_attack1 = false;
x_input_dir = 0;

//Health

hp = 1;

//Frame Variables: Other

damage = 0;
immune = false;
immune_time = 0;
hit = false;

x_knockback = 0;
y_knockback = 0;

//Frame Variables: Movement

x_speed = 0;
y_speed = 0;

on_ground = false;
landing = false;
attacking = false;
sliding = false;
walking = true;

//Physics

x_ground_fric = 0.5;
x_air_fric = 0.05;

x_ground_slide = 1 / 10;

x_ground_accel = 0.5;
x_air_accel = 0.25;

x_speed_max = 4;

y_accel = 0.5;

jump_vel = 10;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Movement Prediction and Collision

//Check Projected Collision Twice

var x_adjusted = false;
var y_adjusted = false;

for (c = 0; c &lt; 2; c++)
{
    var col_step = 0;
    var col_obj = noone;

    //4 Step Collision Check

    for (i = 1; i &lt; 5; i++)
    {
        col_step = (i / 4);
        col_obj = instance_place(x + (x_speed * col_step), y + (y_speed * col_step), obj_world);
    
        if col_obj != noone
        {
            i = 5;
        }
    }

    //If there is a collision

    if col_obj != noone
    {
        //If predicted Y position can be corrected
        if !y_adjusted
        {
            if col_obj.bbox_top &gt; bbox_bottom
            {
                y_speed = col_obj.bbox_top - bbox_bottom - 1;
                y_adjusted = true;
            }
            else if col_obj.bbox_bottom &lt; bbox_top
            {
                y_speed = col_obj.bbox_bottom - bbox_top + 1;
                y_adjusted = true;
            }
        }
        //If predicted X position can be corrected
        if !x_adjusted
        {
            if col_obj.bbox_left &gt; bbox_right
            {
                x_speed = col_obj.bbox_left - bbox_right - 1;
                x_adjusted = true;
            }
            else if col_obj.bbox_right &lt; bbox_left
            {
                x_speed = col_obj.bbox_right - bbox_left + 1;
                x_adjusted = true;
            }
        }
    }
}

//Finally, finally, finally, adjust x and y pos

x += x_speed;
y += y_speed;

//Maintain Floating Height

obj_float = instance_place(x, y + float_height, obj_world)

if obj_float != noone
{
    y = obj_float.bbox_top - float_height;
    y_speed = 0;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Animation Control

//ani_timer controls the update period for animations
//This way animations can be interrupted, but still play at the correct framerate

//Flip the image to the correct direction

if !(hit or attacking)
{
    if x_input_dir != 0
    {
        facing = x_input_dir;
    }
}

image_xscale = facing;

//New Animation System

ani_timer++;
ani_end = false;
ani_attack = false;

if state == state_prev
{
/*
    if anis[state, ani_chain].is_attack
    {
        if anis[state, ani_chain].frame_hit_start != anis[state, ani_chain].frame_hit_end
        {
            if image_index &gt;= anis[state, ani_chain].frame_hit_start and image_index &lt; anis[state, ani_chain].frame_hit_end
            {
                atk_call(self, atks[state, ani_chain], x, y, facing);
            }
        }
    }
*/
    if ani_timer % anis[state, ani_chain].frametime == 0
    {
        if anis[state, ani_chain].is_chain
        {
            if image_index == image_number - 1
            {
                ani_chain++;
                sprite_index = anis[state, ani_chain].sprite;
                ani_timer = 0;
                image_index = 0;
            }
            else
            {
                image_index++;
            }
        }
        else if !anis[state, ani_chain].is_loop
        {
            if image_index == image_number - 1
            {
                ani_end = true;
            }
            else
            {
                image_index++;
            }
        }
        else
        {
            image_index++;
        }
        if anis[state, ani_chain].is_attack
        {
            if image_index &gt;= anis[state, ani_chain].frame_hit_start and image_index &lt;= anis[state, ani_chain].frame_hit_end
            {
                atk_call(self, atks[state, ani_chain], x, y, facing);
            }
        }
/*
        if anis[state, ani_chain].is_attack
        {
            if anis[state, ani_chain].frame_hit_start == anis[state, ani_chain].frame_hit_end
            {
                if image_index == anis[state, ani_chain].frame_hit_start
                {
                    atk_call(self, atks[state, ani_chain], x, y, facing);
                }
            }
        }
*/
    }
}
else
{
    ani_chain = 0;
    sprite_index = anis[state, ani_chain].sprite;
    ani_timer = 0;
    image_index = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Damage and Hitboxes

var col_atk = instance_place(x, y, obj_atk)

if col_atk != noone
{
    if col_atk.team != team
    {
        if col_atk.parent != self
        {
            if !immune
            {
                audio_play_sound(sound_hit, 0, false);
                damage += col_atk.damage;
                immune_time = col_atk.immune_time;
                x_knockback = col_atk.x_knockback * col_atk.facing;
                y_knockback = col_atk.y_knockback;
            }
            
            if col_atk.type == attacks.PROJ
            {
                if !immune
                {
                    col_atk.hit = true;
                }
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///States

//Determine current state

//Enum Index
/*
IDLE = 0,
WALK = 1,
JUMP = 2,
FALL = 3,
LAND = 4,
HIT = 5,
ATTACK0 = 5,
ATTACK1 = 6,
etc...
6-11 is for air attacks
12-16 is for ground attacks
*/

///Pre-State Frame Variables

on_ground = place_meeting(x, y + float_height + 1, obj_world);

state_prev = state;

if state == states.IDLE
{
    if damage &gt; 0 
    {
        state = states.HIT;
    }
    else if !on_ground
    {
        state = states.FALL;
    }
    else if input_attack0
    {
        state = states.ATTACK0;
    }
    else if input_attack1
    {
        state = states.ATTACK1;
    }
    else if input_jump
    {
        state = states.JUMP;
    }
    else if x_input_dir != 0
    {
        state = states.WALK;
    }
}
else if state == states.WALK
{
    if damage &gt; 0
    {
        state = states.HIT;
    }
    else if !on_ground
    {
        state = states.FALL;
    }
    else if input_attack0
    {
        state = states.ATTACK0;
    }
    else if input_attack1
    {
        state = states.ATTACK1;
    }
    else if input_jump
    {
        state = states.JUMP;
    }
    else if x_input_dir == 0
    {
        state = states.IDLE;
    }
}
else if state == states.JUMP
{
    if damage &gt; 0
    {
        state = states.HIT;
    }
    else if !on_ground
    {
        state = states.FALL;
    }
}
else if state == states.FALL
{
    if damage &gt; 0
    {
        state = states.HIT;
    }
    else if on_ground
    {
        state = states.LAND;
    }
    else if input_attack0
    {
        state = states.ATTACK0;
    }
    else if input_attack1
    {
        state = states.ATTACK1;
    }
}
else if state == states.LAND
{
    if damage &gt; 0
    {
        state = states.HIT;
    }
    if !landing
    {
        state = states.IDLE;
    }
}
else if state &gt;= 6 and state &lt;= 11
{
    if damage &gt; 0
    {
        state = states.HIT;
    }
    if !attacking
    {
        if !on_ground
        {
            state = states.FALL;
        }
        else if x_input_dir != 0
        {
            state = states.WALK;
        }
        else
        {
            state = states.IDLE;
        }
    }
}
else if state == states.HIT
{
    if !hit
    {
        if !on_ground
        {
            state = states.FALL;
        }
        else if x_input_dir != 0
        {
            state = states.WALK;
        }
        else
        {
            state = states.IDLE;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Delete

if hp &lt; 0
{
    hp = 0;
}

if state != states.HIT
{
    if hp = 0
    {
        audio_play_sound(sound_die, 0, false);
        instance_destroy();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Post-State Frame Variables/Updates


//Manage Damage, Health, and Knockback

if !immune
{
    hp -= damage;
    x_speed += x_knockback;
    y_speed += y_knockback;

    if x_knockback != 0
    {
        facing = -sign(x_knockback);
    }
}

damage = 0;
x_knockback = 0;
y_knockback = 0;

//Manage Immunity

if !immune
{
    if immune_time &gt; 0
    {
        immune = true;
    }
}
else
{
    if immune_time == 0
    {
        immune = false;
    }
    else
    {
        immune_time--;
    }
}

//Manage Walking

if state == states.WALK
{
    if !walking
    {
        walking = true;
    }
}
else
{
    walking = false;
}

//Manage Hit

if state == states.HIT
{
    if !hit
    {
        hit = true;
    }
    if ani_end
    {
        hit = false;
    }
}
else
{
    if hit
    {
        hit = false;
    }
}

//Manage Attacking

if state &gt;= 6
{
    if !attacking
    {
        attacking = true;
    }
    if ani_end
    {
        attacking = false;
    }
}
else
{
    if attacking
    {
        attacking = false;
    }
}

//Manage Landing

if state == states.LAND
{
    if !landing
    {
        landing = true;
    }
    if ani_end
    {
        landing = false;
    }
}
else
{
    if landing
    {
        landing = false;
    }
}

//Manage Jumping

if state == states.JUMP
{
    if ani_end
    {
        y_speed = y_speed + -jump_vel;
        x_speed = x_speed_max * (x_input_dir);
    }
    else if sprite_index &gt; 0 and !input_jump
    {
        y_speed = y_speed + (-jump_vel * 0.8);
        x_speed = x_speed_max * (x_input_dir);
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Intended Movement

//Variables

sliding = state == states.JUMP or hit;

//Deccelerate the player with friction

if on_ground and !sliding
{
    if landing or x_input_dir == 0
    {
        if abs(x_speed) &lt;= x_ground_fric
        {
            x_speed = 0;
        }
        else
        {
            x_speed += -sign(x_speed) * x_ground_fric;
        }
    }
}

//Deccelerate the player with sliding

if on_ground and sliding
{
    if abs(x_speed) &lt;= x_ground_slide
    {
        x_speed = 0;
    }
    else
    {
        x_speed += -sign(x_speed) * x_ground_slide;
    }
}

//Deccelerate the player in the air

if !on_ground and !hit and x_input_dir == 0
{
    if abs(x_speed) &lt;= x_air_fric
    {
        x_speed = 0;
    }
    else
    {
        x_speed += -sign(x_speed) * x_air_fric;
    }
}

//Accelerate the player with input

if on_ground and !sliding and !landing and !hit and x_input_dir != 0
{
    x_speed = x_speed + (x_input_dir * x_ground_accel);
}

//Limit speed while on the ground

if on_ground
{
    if abs(x_speed) &gt; x_speed_max
    {
        x_speed = sign(x_speed) * x_speed_max;
    }
}

//Accelerate the player while falling, while limiting the speed

if !on_ground and !hit
{
    if abs(x_speed) &lt; x_speed_max or sign(x_speed) != sign(x_input_dir)
    {
        x_speed = x_speed + (x_input_dir * x_air_accel);
    }
}

//Accelerate the player's falling speed or reset it

if !on_ground
{
    y_speed = y_speed + y_accel;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
